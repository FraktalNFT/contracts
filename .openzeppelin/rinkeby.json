{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x780A888c354870039629F6150B8f2E3F5C3d59DB",
    "txHash": "0x4c039f6a36d3448494ebd1c9ab8dc1438408970c91d684c2ea28527d8c42a0da",
    "deployTransaction": {
      "hash": "0x4c039f6a36d3448494ebd1c9ab8dc1438408970c91d684c2ea28527d8c42a0da",
      "type": 2,
      "accessList": [],
      "blockHash": "0xd7eacc35f6a597ea2b9b1b6661ec28e4d9416c46868da28b55c124a9669903ad",
      "blockNumber": 10063465,
      "transactionIndex": 27,
      "confirmations": 1,
      "from": "0x9dEF0E7Aa249c2D8Bcf20338DB9d343c7a19beef",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x9502f919"
      },
      "maxPriorityFeePerGas": {
        "type": "BigNumber",
        "hex": "0x9502f900"
      },
      "maxFeePerGas": {
        "type": "BigNumber",
        "hex": "0x9502f91f"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x0762b4"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 25,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x235cd94c854db273ac19fe94c586dc274c39049d0b17a288cc7984e657acd21a",
      "s": "0x1a0de44d9010898e51a968d6f2f830096b074f2fae286650fc876008e69084c9",
      "v": 0,
      "creates": "0x780A888c354870039629F6150B8f2E3F5C3d59DB",
      "chainId": 4
    }
  },
  "proxies": [
    {
      "address": "0x47b724E8F39d41b9c79ee3632b2eCABB4C6DcFA8",
      "txHash": "0xedb0b0794dec3ddde955f3f751a302aefc8eb4026fc9a59c7cdbd1632272054d",
      "kind": "transparent"
    },
    {
      "address": "0xAC5bb139822DF52238c51aaB6932df478e177Ee3",
      "txHash": "0x6956747d3bb1ad8fd5b38203a34d9439ed3d0cc7b323b13009a5d4b5c310a229",
      "kind": "transparent"
    },
    {
      "address": "0xD8c8AF0eE499D4AaE83f37B74D521701062c6b05",
      "txHash": "0x02f59c9a48173b2c0b6464488c94c0d27819517641c65a97cb9401f71f6e10d0",
      "kind": "transparent"
    },
    {
      "address": "0x392EC06440a8107fA417fBA89DacE8ce005Ed318",
      "txHash": "0x1d71b22d7e9d6ef840742337483a34c75bfda9abd22f33bd67159654522e19cf",
      "kind": "transparent"
    },
    {
      "address": "0x1421ba6B13955102F0EB92fcB819e97bc1D00578",
      "txHash": "0xd7e496d8bab87802e7b9b5fffa714a6f8930f2034fab89e62cf0160f0e87b4bf",
      "kind": "transparent"
    },
    {
      "address": "0x47535438cA48Cea630B1e1150ef740ADB5B1cd18",
      "txHash": "0xcb93dc12981f17d97e7dd67b35b63b9e533724a8f877f492f9b4fb96b2f4a8fd",
      "kind": "transparent"
    },
    {
      "address": "0xCCB88F881113cf57f752437bD7A4AbE7257d2a2B",
      "txHash": "0x89f9ada8ca10b66b997b20b88efae807965516533f2a61c92ed8029cdf9abd00",
      "kind": "transparent"
    },
    {
      "address": "0xe398a2Cfa41440e7d33bbdC76f0a65C9Ca3D8373",
      "txHash": "0x0672021a556ec41ce322389ddbcf55952ca9f1dff198a874dc15cac41b135593",
      "kind": "transparent"
    },
    {
      "address": "0x9c27b4310F128Fdb6cfE6b2eA32Af3774Bf6778e",
      "txHash": "0x6fd2cde7c197a617c1c3eb1ccfd8168eae1344a927c9b16ef624b27ab19636fe",
      "kind": "transparent"
    },
    {
      "address": "0x1379cf637fc4cf09D89CDc9131C38DD4dd15D1c7",
      "txHash": "0x337c8e767db7b7d656d0af07818cc4f557c5a748fc858f827c1c9a16341075d6",
      "kind": "transparent"
    },
    {
      "address": "0x1FD4ADF21B1EacDd37d0E35A96d0B574BaAe6Ed2",
      "txHash": "0x6b977424a62524718468c35d6ef05ebe22c0c9b574e9e470aa955d22c09e7034",
      "kind": "transparent"
    },
    {
      "address": "0xeacC8fdB970DeB59982806ca88fDD5026CBB6b2D",
      "txHash": "0x4b95770315360af41b7ed55401df7d3a4a3afa4662ddfa99c9dd642263527d07",
      "kind": "transparent"
    },
    {
      "address": "0xa69bA82C8Fd82724b0160d0181277783826332BB",
      "txHash": "0x9e701f9e18b691fe089a24b2f389afb024c759a96b67c0246bee49478ccaf825",
      "kind": "transparent"
    },
    {
      "address": "0x3212578793D7f84Be50081Fa6595a986eD8e802C",
      "txHash": "0x20549cbec950b3d9d043b1578feeff4098eb0cfc2974c9c24f7e6b040840d5fd",
      "kind": "transparent"
    },
    {
      "address": "0x424B9C55Af06701b10be750A37419a83Fcf4399A",
      "txHash": "0xb34bcb2470b772e681f9fcece59e15ef3c8bfe70174ab6eb098dd3204867d63a",
      "kind": "transparent"
    },
    {
      "address": "0x583414B844Ecc120E4AcaBC952aD73E8FB331F5c",
      "txHash": "0xabad438671bd41813ec6d9fc0dc7e2d732b547b32bb9bf2085683d60f7c55ea0",
      "kind": "transparent"
    },
    {
      "address": "0x9286Ea5E9b22262D4C1f142F1DD35Ffb1EaacD03",
      "txHash": "0xdd37984cc9644d268af03bf3f5d72b3c31aa8eb89c9d5a6721a876a9b52e3cee",
      "kind": "transparent"
    },
    {
      "address": "0x2BA1B4cE0dedc2eE0dA59EEf31a25de42AdBe0C5",
      "txHash": "0xf423793a83c7264d38a10db4f15203b45c187350ad33d3224cc98d1b1ab89b04",
      "kind": "transparent"
    },
    {
      "address": "0xA907eAdb672BeecdeA6e27b4E0567943FabC8407",
      "txHash": "0xe032d4f454e8f7e99951c0055c3bb2345a45eb8b55c1def2403db5249b8d371c",
      "kind": "transparent"
    },
    {
      "address": "0x7C10904Cb76592cbae799f4999525f945884e986",
      "txHash": "0xb8bf2546f6794fb71a0a8effbc7f1b965b26854de6b0ee04739fad68e979f1f8",
      "kind": "transparent"
    },
    {
      "address": "0x6fFb746E53Adb1C80D73Ff48897639A0a3fa0f92",
      "txHash": "0x63f031eb0741a904c7967d5f0092f7c36b94600e1d509b9516f931f39a6455c2",
      "kind": "transparent"
    },
    {
      "address": "0x898721a9F5891c458Af3bACF033E5622cfA7ef67",
      "txHash": "0xe303a3b5a7e7ccd5b3708741cec6a480db21ab85cb5fb91b494098993122ccb2",
      "kind": "transparent"
    },
    {
      "address": "0x40E6c70CEA82cdD6Ba8C65B6f14C3549Fb470FB8",
      "txHash": "0x231e0dc88af187bb26ee9ee422609a355f59f83048f1d78a4aa598d86af37928",
      "kind": "transparent"
    },
    {
      "address": "0x9C3096AB64fE58BbC1961e05161724F73165d9CD",
      "txHash": "0x2f9f340a19ef7c7e79b58fd48f1b5aa12d7cd28cec234e4f06da8a8c5b23d166",
      "kind": "transparent"
    },
    {
      "address": "0x933c4258a71AF34dbB75DBb55931bbD33Ed0c780",
      "txHash": "0x70ded5b66092b5b38fff7401642c8a5c98eafba4473d8bc0f8cf7648de446095",
      "kind": "transparent"
    },
    {
      "address": "0xa76fF27D15d261FE678969C040b153536D6f4bE9",
      "txHash": "0xbf061f8d5a3cc4259f6505f198bf3d9ada9555ad7b6dd517db9bf84b765c7142",
      "kind": "transparent"
    },
    {
      "address": "0x418A5396e7E5d28CF64A58863382A5FB2671487E",
      "txHash": "0x6d9eb91818a8c6bf22f8523b147a70b4072a104d87fdecda52ffa6948454cc45",
      "kind": "transparent"
    },
    {
      "address": "0x19B56b1Ea1522509B7Ab260cBC3989D8Dc024837",
      "txHash": "0xa96bc7593d19af58de4d3b95d0a4bef5c46cb2e9374bf56dd358491af74c259f",
      "kind": "transparent"
    },
    {
      "address": "0x909AEc7A3D204Bfa13EB75E5ff0421506b3F4194",
      "txHash": "0x04d03af3331b6344d1b621917b85fdb2ecc521e623e24cfcf29d690f3de0fdee",
      "kind": "transparent"
    },
    {
      "address": "0xB44345BD52d7CA3770780Cc3c0a425B7d41fdF87",
      "txHash": "0x94efee2fa45d96e39ac909424be8cdef91b7f503525e198c3ab224b698fa6c6d",
      "kind": "transparent"
    },
    {
      "address": "0xCc0c7dC73479eb7F746FEb2D3175268bd7890BDB",
      "txHash": "0x7d4ee980c3e09072ff2d667e39628329a77607d2a38916341ebd97b466709822",
      "kind": "transparent"
    },
    {
      "address": "0xE924f19f2672952F8C6774981A8eC3e09F2da72e",
      "txHash": "0x24f17f76d9c6acf87cbd7570b9cc8263ef36e37f1c3e4db089f98fb25f034f36",
      "kind": "transparent"
    },
    {
      "address": "0x20A2920e438CaCC3461CC9Fe8BC7ef967a9d98C9",
      "txHash": "0x5e7e2074a7a7564a4dffd34b5d563d14e90bed83f386ab1ffa9e5e98503e45ad",
      "kind": "transparent"
    },
    {
      "address": "0xdC2cB4c17534B97c3E863C05Efd08689Cb87f43F",
      "txHash": "0x404fd273c9beb5e9f2173b4e1a5b9e12a681aecf434bfb0ad71edebc3ee2c292",
      "kind": "transparent"
    },
    {
      "address": "0x686E238ee236B7E5775BB2B6B0762E638B9A527A",
      "txHash": "0x9ec87c1aab2c47e5647b41e87b0b2a09a37ca303e951f186174ce6a3b34a6df8",
      "kind": "transparent"
    },
    {
      "address": "0xB0d97E27bC728DC55d5Fe8E84fEaBd8BC066Ab0e",
      "txHash": "0x0d3628dc2acd1c167a34bd923ed693e9cbe34a364b766a88d0aa5d8b18524f53",
      "kind": "transparent"
    },
    {
      "address": "0x8FA22654042c2610a26C70d034F03c54cDB342c1",
      "txHash": "0x1fbd2091e33b8bd0048bcc75f591ebdd0480a4411efb1e3dcc3327c1ceaec227",
      "kind": "transparent"
    },
    {
      "address": "0xeDA73A3478e3156f0d6F45317a38C6a8103dD433",
      "txHash": "0x007eb89e2dc43d31aec5120e1c3001c2f8b59f93e14afb77f08c81c1b2c4a00e",
      "kind": "transparent"
    }
  ],
  "impls": {
    "c9160db6b1333f251a333abb1db9615f639553979b6b168f0629710ee10083ae": {
      "address": "0xB66957F7e84388737682dDfDF55219884B945979",
      "txHash": "0xc75fe5b4dc0057601077a329ebeb5f5c6fa5e2d1a8f1f762aee6fbd2fb0391b2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "FraktalMarket",
            "label": "fee",
            "type": "t_uint16",
            "src": "contracts/FraktalMarket.sol:21"
          },
          {
            "contract": "FraktalMarket",
            "label": "listingFee",
            "type": "t_uint256",
            "src": "contracts/FraktalMarket.sol:22"
          },
          {
            "contract": "FraktalMarket",
            "label": "feesAccrued",
            "type": "t_uint256",
            "src": "contracts/FraktalMarket.sol:23"
          },
          {
            "contract": "FraktalMarket",
            "label": "listings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)5258_storage))",
            "src": "contracts/FraktalMarket.sol:39"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionListings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)5267_storage)))",
            "src": "contracts/FraktalMarket.sol:41"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionNonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:42"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionReserve",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/FraktalMarket.sol:43"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionSellerRedeemed",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/FraktalMarket.sol:44"
          },
          {
            "contract": "FraktalMarket",
            "label": "participantContribution",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))",
            "src": "contracts/FraktalMarket.sol:46"
          },
          {
            "contract": "FraktalMarket",
            "label": "offers",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)5251_storage))",
            "src": "contracts/FraktalMarket.sol:48"
          },
          {
            "contract": "FraktalMarket",
            "label": "sellersBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:49"
          },
          {
            "contract": "FraktalMarket",
            "label": "maxPriceRegistered",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:50"
          }
        ],
        "types": {
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)5258_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarket.Listing))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Listing)5258_storage)": {
            "label": "mapping(address => struct FraktalMarket.Listing)"
          },
          "t_struct(Listing)5258_storage": {
            "label": "struct FraktalMarket.Listing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)5267_storage)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => struct FraktalMarket.AuctionListing)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)5267_storage))": {
            "label": "mapping(address => mapping(uint256 => struct FraktalMarket.AuctionListing))"
          },
          "t_mapping(t_uint256,t_struct(AuctionListing)5267_storage)": {
            "label": "mapping(uint256 => struct FraktalMarket.AuctionListing)"
          },
          "t_struct(AuctionListing)5267_storage": {
            "label": "struct FraktalMarket.AuctionListing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "reservePrice",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              },
              {
                "label": "auctionEndTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
            "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)5251_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarket.Proposal))"
          },
          "t_mapping(t_address,t_struct(Proposal)5251_storage)": {
            "label": "mapping(address => struct FraktalMarket.Proposal)"
          },
          "t_struct(Proposal)5251_storage": {
            "label": "struct FraktalMarket.Proposal",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              },
              {
                "label": "winner",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c2572e434c3114a42521bfeb77d1d29a33c9bc0cf77f64acac08df5386aaaadf": {
      "address": "0x5326CDC8Fa466376271211ACC774400F15De2334",
      "txHash": "0xf7884ffa32f34f9d7833703b72f89e7bf12dc2d506a9e7155cdf5bdd4ea646a5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "FraktalMarket",
            "label": "fee",
            "type": "t_uint16",
            "src": "contracts/FraktalMarket.sol:21"
          },
          {
            "contract": "FraktalMarket",
            "label": "listingFee",
            "type": "t_uint256",
            "src": "contracts/FraktalMarket.sol:22"
          },
          {
            "contract": "FraktalMarket",
            "label": "feesAccrued",
            "type": "t_uint256",
            "src": "contracts/FraktalMarket.sol:23"
          },
          {
            "contract": "FraktalMarket",
            "label": "listings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)5258_storage))",
            "src": "contracts/FraktalMarket.sol:39"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionListings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)5267_storage)))",
            "src": "contracts/FraktalMarket.sol:41"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionNonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:42"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionReserve",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/FraktalMarket.sol:43"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionSellerRedeemed",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/FraktalMarket.sol:44"
          },
          {
            "contract": "FraktalMarket",
            "label": "participantContribution",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))",
            "src": "contracts/FraktalMarket.sol:46"
          },
          {
            "contract": "FraktalMarket",
            "label": "offers",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)5251_storage))",
            "src": "contracts/FraktalMarket.sol:48"
          },
          {
            "contract": "FraktalMarket",
            "label": "sellersBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:49"
          },
          {
            "contract": "FraktalMarket",
            "label": "maxPriceRegistered",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:50"
          }
        ],
        "types": {
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)5258_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarket.Listing))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Listing)5258_storage)": {
            "label": "mapping(address => struct FraktalMarket.Listing)"
          },
          "t_struct(Listing)5258_storage": {
            "label": "struct FraktalMarket.Listing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)5267_storage)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => struct FraktalMarket.AuctionListing)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)5267_storage))": {
            "label": "mapping(address => mapping(uint256 => struct FraktalMarket.AuctionListing))"
          },
          "t_mapping(t_uint256,t_struct(AuctionListing)5267_storage)": {
            "label": "mapping(uint256 => struct FraktalMarket.AuctionListing)"
          },
          "t_struct(AuctionListing)5267_storage": {
            "label": "struct FraktalMarket.AuctionListing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "reservePrice",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              },
              {
                "label": "auctionEndTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
            "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)5251_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarket.Proposal))"
          },
          "t_mapping(t_address,t_struct(Proposal)5251_storage)": {
            "label": "mapping(address => struct FraktalMarket.Proposal)"
          },
          "t_struct(Proposal)5251_storage": {
            "label": "struct FraktalMarket.Proposal",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              },
              {
                "label": "winner",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "65c3af64e1ac222f5054af8574fd4fb92563d2b56f594e6363652059bbd79ef4": {
      "address": "0xdccBF1F683E591e2F4940562851E542DEb9ABC72",
      "txHash": "0x2bf38086b8aa9e35265b0c1d29c8af60d4f746ee4ff94eacf2f17e110e7729c6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "FraktalMarket",
            "label": "fee",
            "type": "t_uint16",
            "src": "contracts/FraktalMarket.sol:21"
          },
          {
            "contract": "FraktalMarket",
            "label": "listingFee",
            "type": "t_uint256",
            "src": "contracts/FraktalMarket.sol:22"
          },
          {
            "contract": "FraktalMarket",
            "label": "feesAccrued",
            "type": "t_uint256",
            "src": "contracts/FraktalMarket.sol:23"
          },
          {
            "contract": "FraktalMarket",
            "label": "listings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)3262_storage))",
            "src": "contracts/FraktalMarket.sol:39"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionListings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)3271_storage)))",
            "src": "contracts/FraktalMarket.sol:41"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionNonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:42"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionReserve",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/FraktalMarket.sol:43"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionSellerRedeemed",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/FraktalMarket.sol:44"
          },
          {
            "contract": "FraktalMarket",
            "label": "participantContribution",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))",
            "src": "contracts/FraktalMarket.sol:46"
          },
          {
            "contract": "FraktalMarket",
            "label": "offers",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)3255_storage))",
            "src": "contracts/FraktalMarket.sol:48"
          },
          {
            "contract": "FraktalMarket",
            "label": "sellersBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:49"
          },
          {
            "contract": "FraktalMarket",
            "label": "maxPriceRegistered",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:50"
          }
        ],
        "types": {
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)3262_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarket.Listing))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Listing)3262_storage)": {
            "label": "mapping(address => struct FraktalMarket.Listing)"
          },
          "t_struct(Listing)3262_storage": {
            "label": "struct FraktalMarket.Listing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)3271_storage)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => struct FraktalMarket.AuctionListing)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)3271_storage))": {
            "label": "mapping(address => mapping(uint256 => struct FraktalMarket.AuctionListing))"
          },
          "t_mapping(t_uint256,t_struct(AuctionListing)3271_storage)": {
            "label": "mapping(uint256 => struct FraktalMarket.AuctionListing)"
          },
          "t_struct(AuctionListing)3271_storage": {
            "label": "struct FraktalMarket.AuctionListing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "reservePrice",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              },
              {
                "label": "auctionEndTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
            "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)3255_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarket.Proposal))"
          },
          "t_mapping(t_address,t_struct(Proposal)3255_storage)": {
            "label": "mapping(address => struct FraktalMarket.Proposal)"
          },
          "t_struct(Proposal)3255_storage": {
            "label": "struct FraktalMarket.Proposal",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              },
              {
                "label": "winner",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "aabb09e6c47041ac1e4fc1179a46bbbe21ef63ac01614944dbd8db93884b2e77": {
      "address": "0x87a17D21d3967538E278f30B3A7fBaeF446b99f0",
      "txHash": "0xba48e628290fe16aa3643122e477e983a9ea0ff861385366b11c1e0ca18e639d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "fee",
            "type": "t_uint16",
            "src": "contracts/FraktalMarketV1_01.sol:21"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "listingFee",
            "type": "t_uint256",
            "src": "contracts/FraktalMarketV1_01.sol:22"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "feesAccrued",
            "type": "t_uint256",
            "src": "contracts/FraktalMarketV1_01.sol:23"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "listings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)4917_storage))",
            "src": "contracts/FraktalMarketV1_01.sol:39"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "auctionListings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)4926_storage)))",
            "src": "contracts/FraktalMarketV1_01.sol:41"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "auctionNonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarketV1_01.sol:42"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "auctionReserve",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/FraktalMarketV1_01.sol:43"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "auctionSellerRedeemed",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/FraktalMarketV1_01.sol:44"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "participantContribution",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))",
            "src": "contracts/FraktalMarketV1_01.sol:46"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "offers",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)4910_storage))",
            "src": "contracts/FraktalMarketV1_01.sol:48"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "sellersBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarketV1_01.sol:49"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "maxPriceRegistered",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarketV1_01.sol:50"
          }
        ],
        "types": {
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)4917_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarketV1_1.Listing))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Listing)4917_storage)": {
            "label": "mapping(address => struct FraktalMarketV1_1.Listing)"
          },
          "t_struct(Listing)4917_storage": {
            "label": "struct FraktalMarketV1_1.Listing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)4926_storage)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => struct FraktalMarketV1_1.AuctionListing)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)4926_storage))": {
            "label": "mapping(address => mapping(uint256 => struct FraktalMarketV1_1.AuctionListing))"
          },
          "t_mapping(t_uint256,t_struct(AuctionListing)4926_storage)": {
            "label": "mapping(uint256 => struct FraktalMarketV1_1.AuctionListing)"
          },
          "t_struct(AuctionListing)4926_storage": {
            "label": "struct FraktalMarketV1_1.AuctionListing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "reservePrice",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              },
              {
                "label": "auctionEndTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
            "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)4910_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarketV1_1.Proposal))"
          },
          "t_mapping(t_address,t_struct(Proposal)4910_storage)": {
            "label": "mapping(address => struct FraktalMarketV1_1.Proposal)"
          },
          "t_struct(Proposal)4910_storage": {
            "label": "struct FraktalMarketV1_1.Proposal",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              },
              {
                "label": "winner",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8ae3469726975c962614e81f954b7955b804d3947b272eb759e6a60619c5c1bd": {
      "address": "0x552B92A5647B761F60c933978ab0309ca47a9f87",
      "txHash": "0xe0cc14c3807015362d84b9b15310995cbe2f98b94b1806272a9bc515a4620236",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "fee",
            "type": "t_uint16",
            "src": "contracts/FraktalMarketV1_01.sol:21"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "listingFee",
            "type": "t_uint256",
            "src": "contracts/FraktalMarketV1_01.sol:22"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "feesAccrued",
            "type": "t_uint256",
            "src": "contracts/FraktalMarketV1_01.sol:23"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "listings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)4917_storage))",
            "src": "contracts/FraktalMarketV1_01.sol:39"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "auctionListings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)4926_storage)))",
            "src": "contracts/FraktalMarketV1_01.sol:41"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "auctionNonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarketV1_01.sol:42"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "auctionReserve",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/FraktalMarketV1_01.sol:43"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "auctionSellerRedeemed",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/FraktalMarketV1_01.sol:44"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "participantContribution",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))",
            "src": "contracts/FraktalMarketV1_01.sol:46"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "offers",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)4910_storage))",
            "src": "contracts/FraktalMarketV1_01.sol:48"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "sellersBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarketV1_01.sol:49"
          },
          {
            "contract": "FraktalMarketV1_1",
            "label": "maxPriceRegistered",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarketV1_01.sol:50"
          }
        ],
        "types": {
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)4917_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarketV1_1.Listing))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Listing)4917_storage)": {
            "label": "mapping(address => struct FraktalMarketV1_1.Listing)"
          },
          "t_struct(Listing)4917_storage": {
            "label": "struct FraktalMarketV1_1.Listing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)4926_storage)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => struct FraktalMarketV1_1.AuctionListing)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)4926_storage))": {
            "label": "mapping(address => mapping(uint256 => struct FraktalMarketV1_1.AuctionListing))"
          },
          "t_mapping(t_uint256,t_struct(AuctionListing)4926_storage)": {
            "label": "mapping(uint256 => struct FraktalMarketV1_1.AuctionListing)"
          },
          "t_struct(AuctionListing)4926_storage": {
            "label": "struct FraktalMarketV1_1.AuctionListing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "reservePrice",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              },
              {
                "label": "auctionEndTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
            "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)4910_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarketV1_1.Proposal))"
          },
          "t_mapping(t_address,t_struct(Proposal)4910_storage)": {
            "label": "mapping(address => struct FraktalMarketV1_1.Proposal)"
          },
          "t_struct(Proposal)4910_storage": {
            "label": "struct FraktalMarketV1_1.Proposal",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              },
              {
                "label": "winner",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "352c5a76d59161dffe8172d65e0dd5cbee1f9844718c50485aa12de41262b7ae": {
      "address": "0x8404B15274fD9AC9eF2E3fB30d8c7db3C874D9e6",
      "txHash": "0xe2454cdb9016da1ea4b6335641198a1b4ff16205fe2902cf66fe68536653d311",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:35"
          },
          {
            "contract": "FraktalFactory",
            "label": "Fraktalimplementation",
            "type": "t_address",
            "src": "contracts/FraktalFactory.sol:16"
          },
          {
            "contract": "FraktalFactory",
            "label": "revenueChannelImplementation",
            "type": "t_address",
            "src": "contracts/FraktalFactory.sol:17"
          },
          {
            "contract": "FraktalFactory",
            "label": "fraktalNFTs",
            "type": "t_struct(UintToAddressMap)4043_storage",
            "src": "contracts/FraktalFactory.sol:18"
          },
          {
            "contract": "FraktalFactory",
            "label": "lockedERC721s",
            "type": "t_mapping(t_address,t_struct(ERC721Imported)4911_storage)",
            "src": "contracts/FraktalFactory.sol:27"
          },
          {
            "contract": "FraktalFactory",
            "label": "lockedERC1155s",
            "type": "t_mapping(t_address,t_struct(ERC1155Imported)4916_storage)",
            "src": "contracts/FraktalFactory.sol:28"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_struct(UintToAddressMap)4043_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3813_storage"
              }
            ]
          },
          "t_struct(Map)3813_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_keys",
                "type": "t_struct(Bytes32Set)4482_storage"
              },
              {
                "label": "_values",
                "type": "t_mapping(t_bytes32,t_bytes32)"
              }
            ]
          },
          "t_struct(Bytes32Set)4482_storage": {
            "label": "struct EnumerableSet.Bytes32Set",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4288_storage"
              }
            ]
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "label": "mapping(bytes32 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(Set)4288_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(ERC721Imported)4911_storage)": {
            "label": "mapping(address => struct FraktalFactory.ERC721Imported)"
          },
          "t_struct(ERC721Imported)4911_storage": {
            "label": "struct FraktalFactory.ERC721Imported",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "tokenIndex",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(ERC1155Imported)4916_storage)": {
            "label": "mapping(address => struct FraktalFactory.ERC1155Imported)"
          },
          "t_struct(ERC1155Imported)4916_storage": {
            "label": "struct FraktalFactory.ERC1155Imported",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "tokenIndex",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "0c056b88b92560b14b8cfcba3ce571eeb7b1fc6058fe5a01b6c9540ddeb2e891": {
      "address": "0x2E17C01b14821fD4C9FE91D76a3c1cbe5C12d53e",
      "txHash": "0xcbfd58f27944a25b3f7bddd1ac3961dc3419f32a0a9e0fc9aef69d30aa3ec970",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "FraktalMarket",
            "label": "fee",
            "type": "t_uint16",
            "src": "contracts/FraktalMarket.sol:21"
          },
          {
            "contract": "FraktalMarket",
            "label": "listingFee",
            "type": "t_uint256",
            "src": "contracts/FraktalMarket.sol:22"
          },
          {
            "contract": "FraktalMarket",
            "label": "feesAccrued",
            "type": "t_uint256",
            "src": "contracts/FraktalMarket.sol:23"
          },
          {
            "contract": "FraktalMarket",
            "label": "listings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)5700_storage))",
            "src": "contracts/FraktalMarket.sol:39"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionListings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)5709_storage)))",
            "src": "contracts/FraktalMarket.sol:41"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionNonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:42"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionReserve",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/FraktalMarket.sol:43"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionSellerRedeemed",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/FraktalMarket.sol:44"
          },
          {
            "contract": "FraktalMarket",
            "label": "participantContribution",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))",
            "src": "contracts/FraktalMarket.sol:46"
          },
          {
            "contract": "FraktalMarket",
            "label": "offers",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)5693_storage))",
            "src": "contracts/FraktalMarket.sol:48"
          },
          {
            "contract": "FraktalMarket",
            "label": "sellersBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:49"
          },
          {
            "contract": "FraktalMarket",
            "label": "maxPriceRegistered",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:50"
          }
        ],
        "types": {
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)5700_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarket.Listing))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Listing)5700_storage)": {
            "label": "mapping(address => struct FraktalMarket.Listing)"
          },
          "t_struct(Listing)5700_storage": {
            "label": "struct FraktalMarket.Listing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)5709_storage)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => struct FraktalMarket.AuctionListing)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)5709_storage))": {
            "label": "mapping(address => mapping(uint256 => struct FraktalMarket.AuctionListing))"
          },
          "t_mapping(t_uint256,t_struct(AuctionListing)5709_storage)": {
            "label": "mapping(uint256 => struct FraktalMarket.AuctionListing)"
          },
          "t_struct(AuctionListing)5709_storage": {
            "label": "struct FraktalMarket.AuctionListing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "reservePrice",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              },
              {
                "label": "auctionEndTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
            "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)5693_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarket.Proposal))"
          },
          "t_mapping(t_address,t_struct(Proposal)5693_storage)": {
            "label": "mapping(address => struct FraktalMarket.Proposal)"
          },
          "t_struct(Proposal)5693_storage": {
            "label": "struct FraktalMarket.Proposal",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              },
              {
                "label": "winner",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "db0b04f4d1d3a47028794a1782f96ae8c9d13319d202a648994c0995c22a4b0e": {
      "address": "0xF915c5Fd027ca2A9ee7890a20efaE2DE59A03929",
      "txHash": "0x603c6d59f4b80cc55811c0aebc07d9e9b27a4563eeb96d2f58e14399311b899a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "FeeSharingSystem",
            "label": "frakToken",
            "type": "t_contract(IERC20Upgradeable)1854",
            "src": "contracts/FeeSharingSystem.sol:23"
          },
          {
            "contract": "FeeSharingSystem",
            "label": "currentRewardPerBlock",
            "type": "t_uint256",
            "src": "contracts/FeeSharingSystem.sol:26"
          },
          {
            "contract": "FeeSharingSystem",
            "label": "lastRewardAdjustment",
            "type": "t_uint256",
            "src": "contracts/FeeSharingSystem.sol:29"
          },
          {
            "contract": "FeeSharingSystem",
            "label": "lastUpdateBlock",
            "type": "t_uint256",
            "src": "contracts/FeeSharingSystem.sol:32"
          },
          {
            "contract": "FeeSharingSystem",
            "label": "periodEndBlock",
            "type": "t_uint256",
            "src": "contracts/FeeSharingSystem.sol:35"
          },
          {
            "contract": "FeeSharingSystem",
            "label": "rewardPerTokenStored",
            "type": "t_uint256",
            "src": "contracts/FeeSharingSystem.sol:38"
          },
          {
            "contract": "FeeSharingSystem",
            "label": "totalShares",
            "type": "t_uint256",
            "src": "contracts/FeeSharingSystem.sol:41"
          },
          {
            "contract": "FeeSharingSystem",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_struct(UserInfo)10439_storage)",
            "src": "contracts/FeeSharingSystem.sol:43"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)1854": {
            "label": "contract IERC20Upgradeable"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(UserInfo)10439_storage)": {
            "label": "mapping(address => struct FeeSharingSystem.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)10439_storage": {
            "label": "struct FeeSharingSystem.UserInfo",
            "members": [
              {
                "label": "shares",
                "type": "t_uint256"
              },
              {
                "label": "userRewardPerTokenPaid",
                "type": "t_uint256"
              },
              {
                "label": "rewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "3f49dc5b32ec07658e7b872a80a69acfff34f8bd7ad35514235a022d5a23ce21": {
      "address": "0x65E25b04eA130c3D9dCc90eC77E54E3395a18Ce9",
      "txHash": "0x6e00b75bf0dc0fb3ca70e7cf872895afada5c8ea71e22450b5e5a608da0aa5bf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol:27"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol:40"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol:35"
          },
          {
            "contract": "FraktalFactory",
            "label": "Fraktalimplementation",
            "type": "t_address",
            "src": "contracts/FraktalFactory.sol:16"
          },
          {
            "contract": "FraktalFactory",
            "label": "revenueChannelImplementation",
            "type": "t_address",
            "src": "contracts/FraktalFactory.sol:17"
          },
          {
            "contract": "FraktalFactory",
            "label": "fraktalNFTs",
            "type": "t_struct(UintToAddressMap)9036_storage",
            "src": "contracts/FraktalFactory.sol:18"
          },
          {
            "contract": "FraktalFactory",
            "label": "lockedERC721s",
            "type": "t_mapping(t_address,t_struct(ERC721Imported)11679_storage)",
            "src": "contracts/FraktalFactory.sol:27"
          },
          {
            "contract": "FraktalFactory",
            "label": "lockedERC1155s",
            "type": "t_mapping(t_address,t_struct(ERC1155Imported)11684_storage)",
            "src": "contracts/FraktalFactory.sol:28"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_struct(UintToAddressMap)9036_storage": {
            "label": "struct EnumerableMap.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)8806_storage"
              }
            ]
          },
          "t_struct(Map)8806_storage": {
            "label": "struct EnumerableMap.Map",
            "members": [
              {
                "label": "_keys",
                "type": "t_struct(Bytes32Set)9475_storage"
              },
              {
                "label": "_values",
                "type": "t_mapping(t_bytes32,t_bytes32)"
              }
            ]
          },
          "t_struct(Bytes32Set)9475_storage": {
            "label": "struct EnumerableSet.Bytes32Set",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)9281_storage"
              }
            ]
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "label": "mapping(bytes32 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(Set)9281_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(ERC721Imported)11679_storage)": {
            "label": "mapping(address => struct FraktalFactory.ERC721Imported)"
          },
          "t_struct(ERC721Imported)11679_storage": {
            "label": "struct FraktalFactory.ERC721Imported",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "tokenIndex",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(ERC1155Imported)11684_storage)": {
            "label": "mapping(address => struct FraktalFactory.ERC1155Imported)"
          },
          "t_struct(ERC1155Imported)11684_storage": {
            "label": "struct FraktalFactory.ERC1155Imported",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "tokenIndex",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "52e657c0d7f415fe8d7184fada339b47eeecbd8935de77af4e8158f28ef5f631": {
      "address": "0x0a06869Ccb1785b2f03F331a38C908F1771D1b71",
      "txHash": "0x2c574dcb3e2d4bb60e1b0dd71f3f5d808abb9149329160de2ec16bc755744f3b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "FraktalMarket",
            "label": "fee",
            "type": "t_uint16",
            "src": "contracts/FraktalMarket.sol:20"
          },
          {
            "contract": "FraktalMarket",
            "label": "listingFee",
            "type": "t_uint256",
            "src": "contracts/FraktalMarket.sol:21"
          },
          {
            "contract": "FraktalMarket",
            "label": "feesAccrued",
            "type": "t_uint256",
            "src": "contracts/FraktalMarket.sol:22"
          },
          {
            "contract": "FraktalMarket",
            "label": "listings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)12473_storage))",
            "src": "contracts/FraktalMarket.sol:40"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionListings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)12484_storage)))",
            "src": "contracts/FraktalMarket.sol:42"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionNonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:43"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionReserve",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/FraktalMarket.sol:44"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionSellerRedeemed",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/FraktalMarket.sol:45"
          },
          {
            "contract": "FraktalMarket",
            "label": "participantContribution",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))",
            "src": "contracts/FraktalMarket.sol:47"
          },
          {
            "contract": "FraktalMarket",
            "label": "offers",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)12464_storage))",
            "src": "contracts/FraktalMarket.sol:49"
          },
          {
            "contract": "FraktalMarket",
            "label": "sellersBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:50"
          },
          {
            "contract": "FraktalMarket",
            "label": "maxPriceRegistered",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:51"
          }
        ],
        "types": {
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)12473_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarket.Listing))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Listing)12473_storage)": {
            "label": "mapping(address => struct FraktalMarket.Listing)"
          },
          "t_struct(Listing)12473_storage": {
            "label": "struct FraktalMarket.Listing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)12484_storage)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => struct FraktalMarket.AuctionListing)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)12484_storage))": {
            "label": "mapping(address => mapping(uint256 => struct FraktalMarket.AuctionListing))"
          },
          "t_mapping(t_uint256,t_struct(AuctionListing)12484_storage)": {
            "label": "mapping(uint256 => struct FraktalMarket.AuctionListing)"
          },
          "t_struct(AuctionListing)12484_storage": {
            "label": "struct FraktalMarket.AuctionListing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "reservePrice",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              },
              {
                "label": "auctionEndTime",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
            "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)12464_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarket.Proposal))"
          },
          "t_mapping(t_address,t_struct(Proposal)12464_storage)": {
            "label": "mapping(address => struct FraktalMarket.Proposal)"
          },
          "t_struct(Proposal)12464_storage": {
            "label": "struct FraktalMarket.Proposal",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              },
              {
                "label": "winner",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "abe9120fa0973fadff716b609fc7acce1b5246ec6eb2c891e75754def44472ad": {
      "address": "0x4403a6A0dB49244e5dfb9A05f08Ed88A132D2824",
      "txHash": "0xb4b71ee78d405f4cd5e1a3f42bcf51490264e467540e2b6ec9ffff7b28214d47",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "FraktalMarket",
            "label": "fee",
            "type": "t_uint16",
            "src": "contracts/FraktalMarket.sol:20"
          },
          {
            "contract": "FraktalMarket",
            "label": "listingFee",
            "type": "t_uint256",
            "src": "contracts/FraktalMarket.sol:21"
          },
          {
            "contract": "FraktalMarket",
            "label": "feesAccrued",
            "type": "t_uint256",
            "src": "contracts/FraktalMarket.sol:22"
          },
          {
            "contract": "FraktalMarket",
            "label": "listings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)12473_storage))",
            "src": "contracts/FraktalMarket.sol:40"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionListings",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)12484_storage)))",
            "src": "contracts/FraktalMarket.sol:42"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionNonce",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:43"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionReserve",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "contracts/FraktalMarket.sol:44"
          },
          {
            "contract": "FraktalMarket",
            "label": "auctionSellerRedeemed",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "src": "contracts/FraktalMarket.sol:45"
          },
          {
            "contract": "FraktalMarket",
            "label": "participantContribution",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))",
            "src": "contracts/FraktalMarket.sol:47"
          },
          {
            "contract": "FraktalMarket",
            "label": "offers",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)12464_storage))",
            "src": "contracts/FraktalMarket.sol:49"
          },
          {
            "contract": "FraktalMarket",
            "label": "sellersBalance",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:50"
          },
          {
            "contract": "FraktalMarket",
            "label": "maxPriceRegistered",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/FraktalMarket.sol:51"
          }
        ],
        "types": {
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Listing)12473_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarket.Listing))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Listing)12473_storage)": {
            "label": "mapping(address => struct FraktalMarket.Listing)"
          },
          "t_struct(Listing)12473_storage": {
            "label": "struct FraktalMarket.Listing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              }
            ]
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)12484_storage)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => struct FraktalMarket.AuctionListing)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(AuctionListing)12484_storage))": {
            "label": "mapping(address => mapping(uint256 => struct FraktalMarket.AuctionListing))"
          },
          "t_mapping(t_uint256,t_struct(AuctionListing)12484_storage)": {
            "label": "mapping(uint256 => struct FraktalMarket.AuctionListing)"
          },
          "t_struct(AuctionListing)12484_storage": {
            "label": "struct FraktalMarket.AuctionListing",
            "members": [
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "reservePrice",
                "type": "t_uint256"
              },
              {
                "label": "numberOfShares",
                "type": "t_uint256"
              },
              {
                "label": "auctionEndTime",
                "type": "t_uint256"
              },
              {
                "label": "name",
                "type": "t_string_storage"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
            "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Proposal)12464_storage))": {
            "label": "mapping(address => mapping(address => struct FraktalMarket.Proposal))"
          },
          "t_mapping(t_address,t_struct(Proposal)12464_storage)": {
            "label": "mapping(address => struct FraktalMarket.Proposal)"
          },
          "t_struct(Proposal)12464_storage": {
            "label": "struct FraktalMarket.Proposal",
            "members": [
              {
                "label": "value",
                "type": "t_uint256"
              },
              {
                "label": "winner",
                "type": "t_bool"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
